// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL1")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  name         String?
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  profile      Profile?
  tickets      Ticket[]
  ticketHeader TicketHeader[]
}

model Profile {
  id        String   @id @default(uuid())
  address   String?
  phone     String?
  nickname  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
}

model Ticket {
  id             String        @id @default(uuid())
  price          Float
  movieDate      DateTime      @db.Date
  movieTime      String
  ticketType     Type          @default(ADULT)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  movie          Movies        @relation(fields: [movieId], references: [id])
  movieId        String
  TicketHeader   TicketHeader? @relation(fields: [ticketHeaderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ticketHeaderId String?
}

enum Type {
  ADULT
  CHILD
  SENIOR
}

model TicketHeader {
  id          String   @id @default(uuid())
  total       Float
  ticketCount Int
  movie       Movies   @relation(fields: [movieId], references: [id])
  movieId     String
  ticketType  Json
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ticket      Ticket[]
}

model Movies {
  id           String         @id @default(uuid())
  movie        String         @unique
  year         Int?
  description  String?        @default("No plot exists for this movie.")
  genre        String?        @default("Action")
  rating       Int?
  image        String?
  length       String?        @default("1h 30m")
  trailerLink  String?        @default("No trailer exists for this movie.")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  tickets      Ticket[]
  movieDate    movieDate[]
  movieTime    movieTime[]
  ticketHeader TicketHeader[]
}

model ticketPrice {
  id        String   @id @default(uuid())
  price     Float
  ticket    Type
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model movieDate {
  id        String   @id @default(uuid())
  date      DateTime @db.Date
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  movie     Movies   @relation(fields: [movieId], references: [id])
  movieId   String
}

model movieTime {
  id        String   @id @default(uuid())
  time      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  movie     Movies   @relation(fields: [movieId], references: [id])
  movieId   String
}
